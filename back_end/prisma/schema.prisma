generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                    String                  @id @default(uuid())
  name                  String                  @db.VarChar(255)
  email                 String                  @unique @db.VarChar(255)
  phone                 String                  @unique @db.VarChar(255)
  city                  String                  @db.VarChar(255)
  district              String                  @db.VarChar(255)
  job                   String                  @db.VarChar(255)
  preferred_mood        PreferredMood
  preferred_goal        PreferredGoal
  hash_password         String                  @db.VarChar(255)
  current_balance       Decimal                 @db.Decimal(14, 2)
  create_at             DateTime                @db.Date
  updated_at            DateTime                @db.Date
  budgets               Budgets[]
  familyBudgetsCreated  FamilyBudgets[]
  familyGoalsCreated    FamilyGoals[]
  familyInvitationsSent FamilyInvitations[]
  familyMemberships     FamilyMembers[]
  goals                 Goals[]
  jwtTokens             JWT[]
  loans                 Loans[]
  recurringTransactions RecurringTransactions[]
  transactions          Transactions[]

  @@map("Users")
}

model Transactions {
  id                  BigInt                           @id @default(autoincrement())
  userId              String
  categoryId          BigInt
  amount              Decimal                          @db.Decimal(11, 2)
  created_at          DateTime                         @db.Date
  description         String                           @db.VarChar(255)
  familyContributions FamilyTransactionContributions[]
  category            Categories                       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user                Users                            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
  @@index([created_at])
  @@map("Transactions")
}

model RecurringTransactions {
  id             BigInt     @id @default(autoincrement())
  userId         String
  categoryId     BigInt
  amount         Decimal    @db.Decimal(11, 2)
  frequency      Frequency
  created_at     DateTime   @db.Date
  next_occurence DateTime   @db.Date
  description    String     @db.VarChar(255)
  category       Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user           Users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
  @@index([next_occurence])
  @@map("RecurringTransactions")
}

model Categories {
  id                    BigInt                  @id @default(autoincrement())
  name                  String                  @db.VarChar(255)
  type                  TransactionType
  budgets               Budgets[]
  familyBudgets         FamilyBudgets[]
  recurringTransactions RecurringTransactions[]
  transactions          Transactions[]

  @@map("Categories")
}

model Budgets {
  id           BigInt     @id @default(autoincrement())
  userId       String
  categoryId   BigInt
  limit_amount Decimal    @db.Decimal(11, 2)
  start_date   DateTime   @db.Date
  end_date     DateTime   @db.Date
  spent_amount Decimal    @db.Decimal(11, 2)
  category     Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user         Users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
  @@map("Budgets")
}

model Goals {
  id            BigInt     @id @default(autoincrement())
  userId        String
  name          String     @db.VarChar(255)
  target_amount Decimal    @db.Decimal(11, 2)
  saved_amount  Decimal    @db.Decimal(11, 2)
  status        GoalStatus
  due_date      DateTime   @db.Date
  created_at    DateTime   @db.Date
  user          Users      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([due_date])
  @@map("Goals")
}

model Loans {
  id               BigInt     @id @default(autoincrement())
  userId           String
  name             String     @db.VarChar(255)
  due_date         DateTime   @db.Date
  created_at       DateTime   @db.Date
  total_amount     Decimal    @db.Decimal(11, 2)
  remaining_amount Decimal    @db.Decimal(11, 2)
  status           LoanStatus
  interest_rate    Decimal    @db.Decimal(11, 2)
  monthly_payment  Decimal    @db.Decimal(11, 2)
  description      String     @db.VarChar(255)
  user             Users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("Loans")
}

model JWT {
  id         BigInt   @id @default(autoincrement())
  userId     String
  token      String   @unique @db.VarChar(255)
  expires_at DateTime @db.Date
  created_at DateTime @db.Date
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("JWT")
}

model FamilyGroups {
  id            BigInt                           @id @default(autoincrement())
  name          String                           @db.VarChar(255)
  description   String?                          @db.VarChar(1000)
  created_at    DateTime                         @db.Date
  updated_at    DateTime                         @db.Date
  avatar_url    String?                          @db.VarChar(500)
  budgets       FamilyBudgets[]
  goals         FamilyGoals[]
  invitations   FamilyInvitations[]
  members       FamilyMembers[]
  contributions FamilyTransactionContributions[]

  @@map("FamilyGroups")
}

model FamilyMembers {
  id        BigInt           @id @default(autoincrement())
  groupId   BigInt
  userId    String
  role      FamilyMemberRole
  joined_at DateTime         @db.Date
  group     FamilyGroups     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      Users            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
  @@map("FamilyMembers")
}

model FamilyInvitations {
  id           BigInt           @id @default(autoincrement())
  groupId      BigInt
  inviterId    String
  inviteeEmail String           @db.VarChar(255)
  status       InvitationStatus
  created_at   DateTime         @db.Date
  expires_at   DateTime         @db.Date
  group        FamilyGroups     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviter      Users            @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([inviterId])
  @@index([inviteeEmail])
  @@map("FamilyInvitations")
}

model FamilyBudgets {
  id           BigInt       @id @default(autoincrement())
  groupId      BigInt
  categoryId   BigInt
  limit_amount Decimal      @db.Decimal(11, 2)
  spent_amount Decimal      @db.Decimal(11, 2)
  start_date   DateTime     @db.Date
  end_date     DateTime     @db.Date
  created_at   DateTime     @db.Date
  created_by   String
  category     Categories   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  creator      Users        @relation(fields: [created_by], references: [id], onDelete: Cascade)
  group        FamilyGroups @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([categoryId])
  @@index([created_by])
  @@map("FamilyBudgets")
}

model FamilyGoals {
  id            BigInt       @id @default(autoincrement())
  groupId       BigInt
  name          String       @db.VarChar(255)
  target_amount Decimal      @db.Decimal(11, 2)
  saved_amount  Decimal      @db.Decimal(11, 2)
  status        GoalStatus
  due_date      DateTime     @db.Date
  created_at    DateTime     @db.Date
  created_by    String
  creator       Users        @relation(fields: [created_by], references: [id], onDelete: Cascade)
  group         FamilyGroups @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([created_by])
  @@index([status])
  @@map("FamilyGoals")
}

model FamilyTransactionContributions {
  id               BigInt       @id @default(autoincrement())
  transactionId    BigInt
  groupId          BigInt
  amount           Decimal      @db.Decimal(11, 2)
  created_at       DateTime     @db.Date
  userId           String       @db.VarChar(255)
  contributionType String       @default("BUDGET") @db.VarChar(255)
  group            FamilyGroups @relation(fields: [groupId], references: [id], onDelete: Cascade)
  transaction      Transactions @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([transactionId])
  @@index([groupId])
}

enum PreferredMood {
  IRRITATION
  ENCOURAGEMENT
}

enum PreferredGoal {
  SAVING
  INVESTMENT
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  BIWEEKLY
  QUARTERLY
}

enum GoalStatus {
  PENDING
  IN_PROGRESS
  OVER_DUE
  COMPLETED
}

enum LoanStatus {
  ACTIVE
  PAID
  DEFAULTED
}

enum FamilyMemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}
